{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About oai_repo","text":"<p>The <code>oai_repo</code> Python module provides a configurable implementation of an OAI-PMH compatible repository.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Completely customizable to work with almost any backend you have.</li> <li>Compliant to the OAI-PMH 2.0 specification.</li> <li>Easy to integrate within any Python application.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ul> <li>Installation</li> <li>Simple Example</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>Overview</li> <li>Implementation Classes</li> <li>Helpers</li> <li>Exceptions</li> </ul>"},{"location":"#author-and-license","title":"Author and License","text":"<p>The <code>oai_repo</code> module was developed at the Michigan State University Libraries. It is released under the Apache License version 2.0.</p>"},{"location":"#copyright","title":"Copyright","text":"<p>Copyright (c) 2022 Michigan State University Board of Trustees</p>"},{"location":"example/","title":"Simple Example","text":"<p>At its simplest, using <code>oai_repo</code> involves:</p> <ol> <li>Implementeing a <code>DataInterface</code> class to perform several pre-defined actions.</li> <li>Adding a few lines of Python code to your app similar to: <pre><code>import oai_repo\nfrom .myoaidata import MyOAIData\n\n# Create the repository, passing your implemented DataInterface\nrepo = oai_repo.OAIRepository(MyOAIData())\n\n# Pass in URL arguments as a dict to be processed\nresponse = repo.process( { \"verb\": \"Identify\" } )\nprint( type(response.root()) )  # lxml.etree.Element\nprint( bytes(response) )        # XML byte response\n</code></pre> Resulting in a complete OAI response: <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;OAI-PMH xmlns=\"http://www.openarchives.org/OAI/2.0/\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\"&gt;\n    &lt;responseDate&gt;2022-03-24T05:50:06Z&lt;/responseDate&gt;\n    &lt;request&gt;https://d.lib.msu.edu/oai&lt;/request&gt;\n    &lt;Identify&gt;\n        &lt;repositoryName&gt;MSU Libraries Digital Repository&lt;/repositoryName&gt;\n        &lt;baseURL&gt;https://d.lib.msu.edu/oai&lt;/baseURL&gt;\n        &lt;protocolVersion&gt;2.0&lt;/protocolVersion&gt;\n        &lt;adminEmail&gt;admin@example.edu&lt;/adminEmail&gt;\n        &lt;earliestDatestamp&gt;2012-08-21T13:49:50Z&lt;/earliestDatestamp&gt;\n        &lt;deletedRecord&gt;no&lt;/deletedRecord&gt;\n        &lt;granularity&gt;YYYY-MM-DDThh:mm:ssZ&lt;/granularity&gt;\n        &lt;description&gt;\n            &lt;oai-identifier xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/oai-identifier\n              http://www.openarchives.org/OAI/2.0/oai-identifier.xsd\"&gt;\n                &lt;scheme&gt;oai&lt;/scheme&gt;\n                &lt;repositoryIdentifier&gt;d.lib.msu.edu&lt;/repositoryIdentifier&gt;\n                &lt;delimiter&gt;:&lt;/delimiter&gt;\n                &lt;sampleIdentifier&gt;oai:d.lib.msu.edu:123&lt;/sampleIdentifier&gt;\n            &lt;/oai-identifier&gt;\n        &lt;/description&gt;\n    &lt;/Identify&gt;\n&lt;/OAI-PMH&gt;\n</code></pre></li> </ol> <p>The missing piece above is the <code>MyOAIData</code> class, although you can name this class whatever you'd like. When you create the <code>oai_repo.OAIRepository</code> class, you need to pass it an implemented <code>oai_repo.DataInterface</code> class. This <code>DataInterface</code> provides you a template of the functionality which you must code yourself.</p> <p>For example, in order for the OAI <code>Identify</code> verb to function, you must implement the <code>DataInterface</code> <code>get_identity()</code> method. <pre><code>from oai_repo import DataInterface, Identity\n\nclass MyOAIData(DataInterface):\n    def get_identify(self) -&gt; Identify:\n        ident = Identity()\n        ident.repository_name = \"My OAI Repository\"\n        ident.base_url = f\"https://example.edu/oai\"\n        ident.granularity = \"YYYY-MM-DDThh:mm:ssZ\"\n        ... # fill in the rest of the Identify info\n        return ident\n</code></pre></p> <p>To have full OAI functionality, you will need to implement all the methods defined in the <code>DataInterface</code> class. Refer to the Implementation Classes documentation for more information.</p>"},{"location":"exceptions/","title":"Exceptions","text":"<p>Exceptions are failures within <code>oai_repo</code>. These are not to be confused with OAI Errors which are handled automatically by <code>oai_repo</code>.</p> <p>There are two core exceptions within <code>oai_repo</code>:</p> <ul> <li><code>OAIRepoInternalException</code>: This should be raised when there was a fault in how the <code>DataInterface</code> was implemented.</li> <li><code>OAIRepoExternalException</code>: This should be raised when an external issue prevented a response from being generated (e.g. an API failed).</li> </ul> <p>Additionally, for any method in the <code>DataInterface</code> class that is called but not yet implemented, <code>oai_repo</code> will raise a <code>NotImplementedError</code>.</p> <p>It is up to you to catch and handle the above exceptions: <pre><code>try:\n    repo = oai_repo.OAIRepository(MyOAIData())\n    response = repo.process(args)\nexcept oai_repo.OAIRepoExternalException as exc:\n    # An API call timed out or returned a non-200 HTTP code.\n    # Log the failure and abort with server HTTP 503.\nexcept oai_repo.OAIRepoInternalException as exc:\n    # There is a fault in how the DataInterface was implemented.\n    # Log the failure and abort with server HTTP 500.\n</code></pre></p>"},{"location":"helpers/","title":"Helpers","text":"<p>To help in creating your custom <code>DataInterface</code> implementation, <code>oai_repo</code> comes with a number of helpers to assist with common problems.</p>"},{"location":"helpers/#helper-functions","title":"Helper Functions","text":"<p>These are functions which may prove useful when implementing your your custom DataInterface instance.</p>"},{"location":"helpers/#oai_repo.helpers.apicall_getxml","title":"<code>apicall_getxml(url: str = None) -&gt; etree._Element</code>","text":"<p>Perform API call to a URL and load the response as XML.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>A URL path to call.</p> <code>None</code> <p>Returns:</p> Type Description <code>_Element</code> <p>A lxml.etree._Element containing the root of the loaded XML.</p> <p>Raises:</p> Type Description <code>OAIRepoExternalException</code> <p>when the URL call fails or returns non-200 response.</p> <code>OAIRepoInternalException</code> <p>when call to URL does not return valid XML or no URL was provided.</p> <p>Examples: <pre><code>loadedXml = helpers.apicall_getxml(\"https://api.example.edu/record/42\")\n</code></pre></p>"},{"location":"helpers/#oai_repo.helpers.apicall_querypath","title":"<code>apicall_querypath(url: str = None, jsonpath: str = None, xpath: str = None) -&gt; str | None</code>","text":"<p>Perform an API call on the given URL and then run either a jsonpath or xpath query, returning the first matching result.</p> <p>API call results are cached while processing a single OAI request. Subsequent calls to the same URL will used previous results, without resulting in an additional API call.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to perform an API call to.</p> <code>None</code> <code>jsonpath</code> <code>str</code> <p>A JSONPath query to run on the results from the URL             (must be <code>None</code> if <code>xpath</code> is passed)</p> <code>None</code> <code>xpath</code> <code>str</code> <p>An XPath query to run on the results from the URL          (must be <code>None</code> if <code>jsonpath</code> is passed)</p> <code>None</code> <p>Returns:</p> Type Description <code>str | None</code> <p>The matching string value, or None if not found</p> <p>Raises:</p> Type Description <code>OAIRepoInternalException</code> <p>on invalid URL, invalid query, or wrong API response type.</p> <code>OAIRepoExternalException</code> <p>on API call failure, or a non-200 response.</p> <p>Examples: <pre><code># JSONPath\nearliest_api = {\n    \"url\": f\"{my_solr_url}?fl=dateyear_dt&amp;q=*%3A*&amp;rows=1&amp;sort=dateyear_dt%20asc\",\n    \"jsonpath\": \"$.response.docs[0].dateyear_dt[0]\"\n}\nearliest = helpers.apicall_querypath(**earliest_api)\n</code></pre> <pre><code># XPath\nearliest_url = f\"{my_solr_url}?fl=dateyear_dt&amp;q=*%3A*&amp;rows=1&amp;sort=dateyear_dt%20asc&amp;wt=xml\"\nearliest_query = \"/response/result/doc[0]/arr[name=dateyear_dt]/str[0]/text()\"\nearliest = helpers.apicall_querypath(url=earliest_url, xpath=earliest_query)\n</code></pre></p>"},{"location":"helpers/#oai_repo.helpers.bytes_to_xml","title":"<code>bytes_to_xml(bdata: bytes | BytesIO) -&gt; etree._Element</code>","text":"<p>Given a bytes or BytesIO, parse and return an lxml.etree._Element. If passed an lxml.etree._Element, then will return it unchanged.</p> <p>Parameters:</p> Name Type Description Default <code>bdata</code> <code>bytes | BytesIO</code> <p>The bytes data to parse</p> required <p>Returns:</p> Type Description <code>_Element</code> <p>The loaded XML element.</p> <p>Raises:</p> Type Description <code>XMLSyntaxError</code> <p>On XML parse error</p>"},{"location":"helpers/#oai_repo.helpers.datestamp_long","title":"<code>datestamp_long(timestamp: datetime) -&gt; str</code>","text":"<p>Convert a datetime to long form datestamp: YYYY-MM-DDThh:mm:ssZ</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>A Python datetime</p> required <p>Returns:</p> Type Description <code>str</code> <p>A long granularity formatted date string</p> <p>Examples: <pre><code>from datetime import datetime\nfrom oai_repo import helpers\n# Making a YYYY-MM-DDThh:mm:ssZ granularity time string from a datetime\ntimestr = helpers.datestamp_long(datetime.now())\n</code></pre></p>"},{"location":"helpers/#oai_repo.helpers.datestamp_short","title":"<code>datestamp_short(timestamp: datetime) -&gt; str</code>","text":"<p>Convert a datetime to short form datestamp: YYYY-MM-DD</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>A Python datetime</p> required <p>Returns:</p> Type Description <code>str</code> <p>A short granularity formatted date string</p> <p>Examples: <pre><code>from datetime import datetime\nfrom oai_repo import helpers\n# Making a YYYY-MM-DD granularity time string from a datetime\ntimestr = helpers.datestamp_short(datetime.now())\n</code></pre></p>"},{"location":"helpers/#oai_repo.helpers.granularity_format","title":"<code>granularity_format(granularity: str, timestamp: datetime) -&gt; str</code>","text":"<p>Format a timestamp according to the OAI granularity and return it.</p> <p>Parameters:</p> Name Type Description Default <code>granularity</code> <code>str</code> <p>The granularity from OAI (either <code>YYYY-MM-DDThh:mm:ssZ</code> or <code>YYYY-MM-DD</code>)</p> required <code>timestamp</code> <code>datetime</code> <p>A Python datetime</p> required <p>Returns:</p> Type Description <code>str</code> <p>A granularity formatted date string appropriate to the granularity passed in</p> <p>Examples: <pre><code>from datetime import datetime\nfrom oai_repo import helpers\ntimestr = helpers.granularity_format(\"YYYY-MM-DD\", datetime.now())\n</code></pre></p>"},{"location":"helpers/#oai_repo.helpers.jsonpath_find","title":"<code>jsonpath_find(data: dict | list, path: str) -&gt; list</code>","text":"<p>Get all matching values for a given JSONPath.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict | list</code> <p>The already loaded JSON data</p> required <code>path</code> <code>str</code> <p>The JSONPath to find</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of matching values</p> <p>Raises:</p> Type Description <code>JSONPathError</code> <p>On jsonpath failure</p> <p>Examples: <pre><code>ids = helpers.jsonpath_find(loaded_json, '$.docs[*].id')\n</code></pre></p>"},{"location":"helpers/#oai_repo.helpers.jsonpath_find_first","title":"<code>jsonpath_find_first(data: dict | list, path: str) -&gt; any</code>","text":"<p>Get the first matching value for a given JSONPath</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict | list</code> <p>The already loaded JSON data</p> required <code>path</code> <code>str</code> <p>The JSONPath to find</p> required <p>Returns:</p> Type Description <code>any</code> <p>The matched value, or None if not found</p> <p>Raises:</p> Type Description <code>JSONPathError</code> <p>On jsonpath failure</p> <p>Examples: <pre><code>first_id = helpers.jsonpath_find_first(loaded_json, '$.docs[*].id')\n</code></pre></p>"},{"location":"helpers/#oai_repo.helpers.xpath_find","title":"<code>xpath_find(xmlr: etree.Element, path: str) -&gt; list</code>","text":"<p>Get matching values for a given XPath</p> <p>Parameters:</p> Name Type Description Default <code>xmlr</code> <code>Element</code> <p>The root xml object to query</p> required <code>path</code> <code>str</code> <p>The xpath query</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of matching values</p> <p>Raises:</p> Type Description <code>XPathError</code> <p>On xpath failure</p> <p>Examples: <pre><code>ids = helpers.xpath_find(loaded_xml, \"/response/result/doc/str[name=id]/text()\")\n</code></pre></p>"},{"location":"helpers/#oai_repo.helpers.xpath_find_first","title":"<code>xpath_find_first(xmlr: etree.Element, path: str) -&gt; any</code>","text":"<p>Get the first matching value for a given XPath</p> <p>Parameters:</p> Name Type Description Default <code>xmlr</code> <code>Element</code> <p>The root xml object to query</p> required <code>path</code> <code>str</code> <p>The xpath query</p> required <p>Returns:</p> Type Description <code>any</code> <p>The matched value, or None if not found</p> <p>Raises:</p> Type Description <code>XPathError</code> <p>On xpath failure</p> <p>Examples: <pre><code>first_id = helpers.xpath_find_first(loaded_xml, \"/response/result/doc/str[name=id]/text()\")\n</code></pre></p>"},{"location":"helpers/#transfrorm-class","title":"Transfrorm Class","text":"<p>Apply structured transformations to data using a linear set of rules.</p>"},{"location":"helpers/#oai_repo.transform.Transform","title":"<code>Transform</code>","text":"<p>Given a set of ordered transform rules, use them to transform a string forward either following those rules in order, apply rules in backward order to reverse the transformation.</p> <p>Parameters:</p> Name Type Description Default <code>rules</code> <code>list</code> <p>A list of rules in forward order. Each rule being a dict           with a single key describing the rule type, and a value which           is a list of arguments to that rule.</p> required <p>Examples: <pre><code>rules = [\n    { \"replace\": [\":\", \"_\"] },\n    { \"prefix\": [\"add\", \"oai:\"] },\n    { \"suffix\": [\"del\", \".edu\"] },\n    { \"case\": [\"upper\"] }\n]\nval = \"abcd:5678:example.edu\"\ntr = Transform(rules)\nval = tr.forward(val)\n# val is now \"OAI:ABCD_5678_EXAMPLE\"\nval = tr.reverse(val)\n# val is now \"abcd:5678:example.edu\" again\n</code></pre></p> <p>Rules:</p> Type Parameters Example <code>replace</code> [<code>find</code>, <code>replace_with</code>] <code>[\":\", \"_\"]</code> (replace all <code>:</code> with <code>_</code>) <code>prefix</code> [<code>add</code>|<code>del</code>, <code>string</code>] <code>[\"del\", \"oai:\"]</code> (remove <code>oai:</code> at start of value) <code>suffix</code> [<code>add</code>|<code>del</code>, <code>string</code>] <code>[\"add\", \".id\"]</code> (add <code>.id</code> to end of value) <code>case</code> [<code>upper</code>|<code>lower</code>] <code>[\"upper\"]</code> (convert value to upper case) Important <p>Applying rules in reverse may not always return the original value!</p>"},{"location":"helpers/#oai_repo.transform.Transform.forward","title":"<code>forward(value)</code>","text":"<p>Apply the set of rules to the provided value in original order.</p>"},{"location":"helpers/#oai_repo.transform.Transform.reverse","title":"<code>reverse(value)</code>","text":"<p>Apply the set of rules to the provided value in reverse order.</p>"},{"location":"implementation/","title":"Implementation Classes","text":""},{"location":"implementation/#the-datainterface-class","title":"The <code>DataInterface</code> Class","text":"<p>Class in which all required OAI data retrieval actions must be implemented. The instantiated instance of this class is then passed to the OAI repository.</p> <p>Attributes:</p> Name Type Description <code>limit</code> <code>int</code> <p>Max number of results to return per request for          ListSets, ListIdentifiers, ListRecords</p>"},{"location":"implementation/#oai_repo.interface.DataInterface.get_identify","title":"<code>get_identify() -&gt; Identify</code>","text":"<p>Create and return an instantiated Identify object.</p> <p>Returns:</p> Type Description <code>Identify</code> <p>The Identify object with all properties set appropriately</p>"},{"location":"implementation/#oai_repo.interface.DataInterface.get_metadata_formats","title":"<code>get_metadata_formats(identifier: str | None = None) -&gt; list[MetadataFormat]</code>","text":"<p>Return a list of metadata prefixes for the identifier. If no identifier identifier is passed, then list must contain all possible prefixes for the repository.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str | None</code> <p>An identifer string</p> <code>None</code> <p>Returns:</p> Type Description <code>list[MetadataFormat]</code> <p>A list of instantiated MetadataFormat objects with all properties set appropriately to the identifer. If identifier is None, then list of all possible MetadataFormat objects for the entire repository.</p>"},{"location":"implementation/#oai_repo.interface.DataInterface.get_record_abouts","title":"<code>get_record_abouts(identifier: str) -&gt; list[lxml.etree._Element]</code>","text":"<p>Return a list of XML elements which will populate the <code>&lt;about&gt;</code> tags in GetRecord responses.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>A valid identifier string</p> required <p>Returns:</p> Type Description <code>list[_Element]</code> <p>A list of lxml.etree.Elements to populate <code>&lt;about&gt;</code> tags for the record.</p> Important <p>oai_repo will wrap the response with a <code>&lt;about&gt;</code> tag; do not add it yourself.</p> Note <p>If you implement <code>get_records_abouts</code>, you may not need this method implemented. By default, <code>get_records_abouts</code> is the only method which calls <code>get_record_abouts</code>.</p>"},{"location":"implementation/#oai_repo.interface.DataInterface.get_record_header","title":"<code>get_record_header(identifier: str) -&gt; RecordHeader</code>","text":"<p>Return a RecordHeader instance for the identifier.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>A valid identifier string</p> required <p>Returns:</p> Type Description <code>RecordHeader</code> <p>The RecordHeader object with all properties set appropriately.</p> Note <p>If you implement <code>get_records_header</code>, you may not need this method implemented. By default, <code>get_records_header</code> is the only method which calls <code>get_record_header</code>.</p>"},{"location":"implementation/#oai_repo.interface.DataInterface.get_record_metadata","title":"<code>get_record_metadata(identifier: str, metadataprefix: str) -&gt; lxml.etree._Element | None</code>","text":"<p>Return a lxml.etree.Element representing the root element of the metadata found for the given prefix.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>A valid identifer string</p> required <code>metadataprefix</code> <code>str</code> <p>A metadata prefix</p> required <p>Returns:</p> Type Description <code>_Element | None</code> <p>The lxml.etree.Element for the requested record metadata, or None if record has no metadata for provided prefix.</p> Important <p>oai_repo will wrap the response with a <code>&lt;metadata&gt;</code> tag; do not add it yourself.</p> Note <p>If you implement <code>get_records_metadata</code>, you may not need this method implemented. By default, <code>get_records_metadata</code> is the only method which calls <code>get_record_metadata</code>.</p>"},{"location":"implementation/#oai_repo.interface.DataInterface.get_records_abouts","title":"<code>get_records_abouts(identifiers: list[str]) -&gt; list[list[lxml.etree._Element]]</code>","text":"<p>Return a list of XML elements which will populate the <code>&lt;about&gt;</code> tags in GetRecord responses.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>list</code> <p>A list of valid identifier strings</p> required <p>Returns:</p> Type Description <code>list[list[_Element]]</code> <p>A list of lists, each being the lxml.etree.Elements to populate <code>&lt;about&gt;</code> tags for</p> <code>list[list[_Element]]</code> <p>the record in the first list.</p> Important <p>oai_repo will wrap each response with a <code>&lt;about&gt;</code> tag; do not add them yourself.</p> Note <p>Implementing this function in your DataInterface is optional. You may want to implement a custom version if pulling record metadata is individually slow and could be accomplished faster in bulk.</p>"},{"location":"implementation/#oai_repo.interface.DataInterface.get_records_header","title":"<code>get_records_header(identifiers: list[str]) -&gt; list[RecordHeader]</code>","text":"<p>Return a list of RecordHeader instances for the identifiers.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>list</code> <p>A list of valid identifier strings</p> required <p>Returns:</p> Type Description <code>list[RecordHeader]</code> <p>A list of the RecordHeader objects with all properties set appropriately.</p> Note <p>Implementing this function in your DataInterface is optional. You may want to implement a custom version if pulling record headers is individually slow and could be accomplished faster in bulk.</p>"},{"location":"implementation/#oai_repo.interface.DataInterface.get_records_metadata","title":"<code>get_records_metadata(identifiers: list[str], metadataprefix: str) -&gt; list[lxml.etree._Element | None]</code>","text":"<p>Return a list of lxml.etree.Element representing the root elements for the metadata found for the requested prefix and identifers.</p> <p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list</code> <p>A list of valid identifer strings</p> required <code>metadataprefix</code> <code>str</code> <p>A metadata prefix</p> required <p>Returns:</p> Type Description <code>list[_Element | None]</code> <p>list containing the lxml.etree.Element for each requested record metadata, or None for records which have no metadata for provided prefix.</p> Note <p>Implementing this function in your DataInterface is optional. You may want to implement a custom version if pulling record metadata is individually slow and could be accomplished faster in bulk.</p>"},{"location":"implementation/#oai_repo.interface.DataInterface.get_set","title":"<code>get_set(setspec: str) -&gt; Set</code>","text":"<p>Return an instatiated OAI Set object for the provided setSpec string.</p> <p>Parameters:</p> Name Type Description Default <code>setspec</code> <code>str</code> <p>a setSpec string</p> required <p>Returns:</p> Type Description <code>Set</code> <p>The Set object with all properties set appropriately, or None if the setspec is not valid or does not exist.</p>"},{"location":"implementation/#oai_repo.interface.DataInterface.is_valid_identifier","title":"<code>is_valid_identifier(identifier: str) -&gt; bool</code>","text":"<p>Determine if an identifier string is valid format and exists.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>A string to check for being an identifier</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if given string is an identifier that exists.</p>"},{"location":"implementation/#oai_repo.interface.DataInterface.list_identifiers","title":"<code>list_identifiers(metadataprefix: str, filter_from: datetime = None, filter_until: datetime = None, filter_set: str = None, cursor: int = 0) -&gt; tuple</code>","text":"<p>Return valid identifier strings, filtered appropriately to passed parameters.</p> <p>Parameters:</p> Name Type Description Default <code>metadataprefix</code> <code>str</code> <p>The metadata prefix to match.</p> required <code>filter_from</code> <code>datetime</code> <p>Include only identifiers on or after given datetime.</p> <code>None</code> <code>filter_until</code> <code>datetime</code> <p>Include only identifiers on or before given datetime.</p> <code>None</code> <code>filter_set</code> <code>str</code> <p>Include only identifers within the matching setSpec string.</p> <code>None</code> <code>cursor</code> <code>int</code> <p>position in results to start retrieving from</p> <code>0</code> <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple of length 3:</p> <ol> <li>(list) Valid identifier strings for the repository, filtered appropriately,     or None if no <code>resuptionToken</code> is needed.</li> <li>(int|None) The <code>completeListSize</code> for a <code>resumptionToken</code> or Null to not send.</li> <li>(Any|None) An str()-able value which indicates the constant-ness of the complete     result set. If any value in the results changes, this value should also     change. A changed value will invalidate current <code>resumptionToken</code>s.     If None, the <code>resumptionToken</code>s will only invalidate based on     reduction in in <code>completeListSize</code>.</li> </ol>"},{"location":"implementation/#oai_repo.interface.DataInterface.list_set_specs","title":"<code>list_set_specs(identifier: str = None, cursor: int = 0) -&gt; tuple</code>","text":"<p>Return a list of setSpec string for the given identifier string if provided, or the list of all valid setSpec strings for the repository if no identifier is None.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>a valid identifier string</p> <code>None</code> <code>cursor</code> <code>int</code> <p>position in results to start from</p> <code>0</code> <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple of length 3:</p> <ol> <li>(list|None) List of setSpec strings or None if the repository does not support     sets, or None if no <code>resuptionToken</code> is needed.</li> <li>(int|None) The <code>completeListSize</code> for a <code>resumptionToken</code> or Null to not send.</li> <li>(Any|None) An str()-able value which indicates the constant-ness of the complete     result set. If any value in the results changes, this value should also     change. A changed value will invalidate current <code>resumptionToken</code>s.     If None, the <code>resumptionToken</code>s will only invalidate based on     reduction in in <code>completeListSize</code>.</li> </ol>"},{"location":"implementation/#classes-returned-by-datainterface-methods","title":"Classes Returned by <code>DataInterface</code> Methods","text":""},{"location":"implementation/#oai_repo.interface.Identify","title":"<code>Identify</code>  <code>dataclass</code>","text":"<p>The info needed for the Identify verb. In your <code>DataInterface.get_identify_instance()</code> method create an instance of this class, set appropriate data, and return it.</p> <p>Attributes:</p> Name Type Description <code>repository_name</code> <code>str</code> <p>The name of the OAI repository</p> <code>base_url</code> <code>str</code> <p>the base url for this repository</p> <code>admin_email</code> <code>list</code> <p>a list of email addresses, cannot be empty</p> <code>earliest_datestamp</code> <code>str | datetime</code> <p>a string in the granularity format or a datetime object</p> <code>deleted_record</code> <code>str</code> <p>OAI deleted record value, one of <code>no</code>, <code>persistent</code>, <code>transient</code></p> <code>granularity</code> <code>str</code> <p>OAI granularity, either <code>YYYY-MM-DDThh:mm:ssZ</code> or <code>YYYY-MM-DD</code></p> <code>compression</code> <code>list</code> <p>compression to be available (typically left empty)</p> <code>description</code> <code>list</code> <p>can be bytes data or a pre-loaded lxml Element</p> <p>Examples: <pre><code>ident = oai_repo.Identify()\nident.repository_name = \"My Repo\"\nident.base_url = f\"https://example.edu/oai\"\nident.deleted_record = \"no\"\nident.granularity = \"YYYY-MM-DDThh:mm:ssZ\"\nident.compression = []\n... # remaining attributes\n</code></pre></p>"},{"location":"implementation/#oai_repo.interface.MetadataFormat","title":"<code>MetadataFormat</code>  <code>dataclass</code>","text":"<p>Class to define fields necessary for an OAI metadata format. Your definition of the <code>DataInterface.get_metadata_formats()</code> method should return a list of these.</p> <p>Attributes:</p> Name Type Description <code>metadata_prefix</code> <code>str</code> <p>A metadataPrefix string</p> <code>schema</code> <code>str</code> <p>The schema for the metadata</p> <code>metadata_namespace</code> <code>str</code> <p>The namespace for the metadata</p> <p>Examples: <pre><code>mdf = oai_repo.MetadataFormat(\n    \"oai_dc\",\n    \"http://www.openarchives.org/OAI/2.0/oai_dc.xsd\",\n    \"http://www.openarchives.org/OAI/2.0/oai_dc/\"\n)\n</code></pre></p>"},{"location":"implementation/#oai_repo.interface.RecordHeader","title":"<code>RecordHeader</code>  <code>dataclass</code>","text":"<p>Class to define a record header for an identifier. Your definition of the <code>DataInterface.get_record_header()</code> method should return one of these.</p> <p>Attributes:</p> Name Type Description <code>identifier</code> <code>str</code> <p>The OAI identifier</p> <code>datestamp</code> <code>str | datetime</code> <p>The datestamp for when this record was created or last modified</p> <code>setspecs</code> <code>list[str]</code> <p>A list of setspec strings this recdord is part of</p> <code>status</code> <code>str</code> <p>The optional OAI status</p>"},{"location":"implementation/#oai_repo.interface.Set","title":"<code>Set</code>  <code>dataclass</code>","text":"<p>Class to define fields for an OAI set. Your definition of the <code>DataInterface.get_metadata_formats()</code> method should return a list of these.</p> <p>Attributes:</p> Name Type Description <code>spec</code> <code>str</code> <p>The setspec string</p> <code>name</code> <code>str</code> <p>The name associated with the setspec</p> <code>description</code> <code>list</code> <p>A list of lxml.etree.Elements to populate                  <code>&lt;setDescription&gt;</code> tags for the set.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>The <code>oai_repo</code> module requires Python 3.10+</p> <p>The recommended means of installation is <code>pip</code>: <pre><code>pip install oai_repo\n</code></pre></p> <p>The following dependencies will automatically be installed:</p> <ul> <li>Cerberus</li> <li>jsonpath-ng</li> <li>lxml</li> <li>requests</li> <li>validators</li> </ul>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#implementation","title":"Implementation","text":"<p>The <code>oai_repo</code> module requires you first define an implementation of the <code>oai_repo.DataInterface</code> class, filling out functionality for all the functions within. You can name your implementation class whatever you'd like.</p> <pre><code>import oai_repo\n\nclass MyOAIData(oai_repo.DataInterface):\n    def get_identify(self):\n        ident = oai_repo.Identify()\n        ... # fill in the Identify data\n        return ident\n\n    def get_record_header(self, identifier):\n        rechead = oai_repo.RecordHeader()\n        ... # fill in the RecordHeader data\n        return rechead\n\n    ... # fill in the remaining methods\n</code></pre> <p>You can feel free to add additional attributes and methods to your implementation, but at minimum you will need to complete all the methods from <code>DataInterface</code>. <pre><code># Example of adding extra custom attributes and methods to your implementation\nclass MyOAIData(oai_repo.DataInterface):\n    ...\n\n    identifier_transform = oai_repo.helpers.Transform(...)\n\n    def localid(self, identifier):\n        \"\"\"Custom method to convert OAI identifer to localid\"\"\"\n        return self.identifier_transform.forward(identifier)\n\n    def identifier(self, localid):\n        \"\"\"Custom method to convert from localid to OAI identifier\"\"\"\n        return self.identifier_transform.reverse(localid)\n</code></pre></p>"},{"location":"overview/#processing-requests","title":"Processing Requests","text":"<p>A good first step is to just implement the <code>get_identify()</code> method and test that before working on the completing the entire <code>DataInterface</code> implementation.</p> <p>To run your OAI repository, you'll need to pass your custom class into <code>oai_repo.OAIRepository</code>, which will serve as your OAI request processor. <pre><code># args = { 'verb': 'Identify' }\ntry:\n    repo = oai_repo.OAIRepository(MyOAIData())\n    response = repo.process(args)\nexcept oai_repo.OAIRepoExternalException as exc:\n    # An API call timed out or returned a non-200 HTTP code.\n    # Log the failure and abort with server HTTP 503.\nexcept oai_repo.OAIRepoInternalException as exc:\n    # There is a fault in how the DataInterface was implemented.\n    # Log the failure and abort with server HTTP 500.\n</code></pre></p> <p>Once you have the response, you can check if the result is an OAIError or not using a boolean check. You don't have to treat OAIError responses any differently than a successful response, it is already a well formed XML OAI compliant response, but this is an easy way to check nonetheless. <pre><code>if not response:\n    print(\"We created an OAIError response.\")\n</code></pre></p> <p>To retrieve the response as XML (an <code>lxml.etree._Element</code> specifically), use the <code>root()</code> method. <pre><code>xml_response = response.root()\n</code></pre></p> <p>To get the raw response as bytes, just cast it as <code>bytes()</code>. <pre><code>xml_bytes = bytes(response)\n</code></pre></p> <p>At this point, you can take the response data and return it to the client, or pass it back to whatever web framework you're using. That's it!</p> <p>Reference for <code>OAIRepository</code> and <code>OAIResponse</code> are below, but be sure to read through the Implementation Classes documentation for insight on how to create your customized <code>DataInterface</code> class.</p>"},{"location":"overview/#oai_repo.repository.OAIRepository","title":"<code>OAIRepository(data: DataInterface)</code>","text":"<p>The primary OAI repository class which processes requests and returns responses.</p> <p>Initialize OAIRepository by passing in an implementation of the DataInterface class.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataInterface</code> <p>The implemented data class</p> required"},{"location":"overview/#oai_repo.repository.OAIRepository.process","title":"<code>process(request: dict) -&gt; OAIResponse</code>","text":"<p>Given request arguments, route to appropriate action, process the request and return a response.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict</code> <p>The request arguments</p> required <p>Returns:</p> Type Description <code>OAIResponse</code> <p>An completed OAIResponse</p> <p>Raises:</p> Type Description <code>OAIRepoInternalException</code> <p>When resp creation fails due to code or API misconfiguration.</p> <code>OAIRepoExternalException</code> <p>When resp creation fails due to an external API call.</p>"},{"location":"overview/#oai_repo.repository.OAIResponse","title":"<code>OAIResponse</code>","text":"<p>Base class for OAI responses</p>"},{"location":"overview/#oai_repo.repository.OAIResponse.__bool__","title":"<code>__bool__()</code>","text":"<p>Whether the OAIResponse represents a success or not. Returns False if response is an OAIError.</p> <p>Examples: <pre><code>response = repo.process(args)\nif not response:\n    print(f\"The response is an OAIError.\")\n</code></pre></p>"},{"location":"overview/#oai_repo.repository.OAIResponse.__bytes__","title":"<code>__bytes__()</code>","text":"<p>Return the XML response as bytes, including an XML header line. <pre><code>response = repo.process(args)\nxml_bytes = bytes(response)\n</code></pre></p>"},{"location":"overview/#oai_repo.repository.OAIResponse.root","title":"<code>root() -&gt; etree.Element</code>","text":"<p>Return the root lxml.etree.Element.</p>"},{"location":"overview/#oai_repo.repository.OAIResponse.xpath","title":"<code>xpath(query: str) -&gt; etree.Element</code>","text":"<p>Return results of an xpath query from the root element.</p>"}]}